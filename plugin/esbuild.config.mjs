import fs from "node:fs";
import path from "node:path";
import process from "node:process";
import builtins from "builtin-modules";
import { config } from "dotenv";
import esbuild from "esbuild";
import esbuildPluginTsc from "esbuild-plugin-tsc";

config();

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const pluginDir = path.dirname(new URL(import.meta.url).pathname);
const srcDir = path.join(pluginDir, "src");
const outDir = "./dist/plugin";

const parameters = {
    banner: {
        js: banner,
    },
    entryPoints: [path.join(srcDir, "main.ts")],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "codemirror",
        "@codemirror/language",
        "@codemirror/state",
        "@codemirror/view",
        "moment",
        ...builtins,
    ],
    format: "cjs",
    logLevel: "info",
    target: "es2020",
    treeShaking: true,
    sourcemap: prod ? false : "inline",
    minify: prod,
    outdir: outDir,
    plugins: [
        esbuildPluginTsc({
            tsconfigPath: path.resolve(pluginDir, "./tsconfig.json"),
        }),
        {
            name: "resolve-ts-paths",
            setup(build) {
                // Resolve ./@types imports
                build.onResolve({ filter: /^\.\/@types/ }, (args) => {
                    if (args.path === "./@types") {
                        return {
                            path: path.resolve(srcDir, "@types/index.d.ts"),
                        };
                    }
                    const modulePath = args.path.replace(
                        /^\.\/@types\//,
                        "@types/",
                    );
                    return { path: path.resolve(srcDir, modulePath) };
                });

                // Run after build completes to copy manifest.json
                build.onEnd(async () => {
                    copyManifest();
                });
            },
        },
    ],
};

if (prod) {
    await esbuild.build(parameters).catch((x) => {
        if (x.errors) {
            console.error(x.errors);
        } else {
            console.error(x);
        }
        process.exit(1);
    });
} else {
    const ctx = await esbuild.context(parameters);
    await ctx.watch();
}

function copyManifest() {
    try {
        const manifestPath = path.join(pluginDir, "manifest.json");
        const targetPath = path.join(process.cwd(), outDir, "manifest.json");

        // Read the manifest file
        const manifest = fs.readFileSync(manifestPath, "utf8");

        // Create the output directory if it doesn't exist
        fs.mkdirSync(path.dirname(targetPath), { recursive: true });

        // Write the manifest to the output directory
        fs.writeFileSync(targetPath, manifest);

        console.log(`Manifest copied to ${targetPath}`);
    } catch (error) {
        console.error("Error copying manifest:", error);
    }
}
